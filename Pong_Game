# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True


PADDLE_VELOCITY_MIN = 5
PADDLE_VELOCITY_MAX = 13
TICK_PER_SEC = 60.0
SPEED_UP = 1.1
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    
    ball_vel = [random.randrange(120, 240)/TICK_PER_SEC, -1*random.randrange(60, 180)/TICK_PER_SEC]
    if direction == LEFT:
        ball_vel[0] *= -1
        
def spawn_paddle():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel
    global update_tick, paddle1_keydown_tick, paddle2_keydown_tick
    paddle1_vel = paddle2_vel = 0
    update_tick = paddle1_keydown_tick = paddle2_keydown_tick = 0
    paddle1_pos = paddle2_pos = HEIGHT / 2

# define event handlers
def new_game(direction=RIGHT):
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints

    score1 = score2 = 0
    spawn_paddle()
    spawn_ball(direction)
        
def update_ball():
    global ball_pos
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    
    if ball_pos[1] - BALL_RADIUS <= 0:
        ball_pos[1] = BALL_RADIUS
        ball_vel[1] *= -1
    
    if ball_pos[1] + BALL_RADIUS >= HEIGHT:
        ball_pos[1] = HEIGHT - BALL_RADIUS
        ball_vel[1] *= -1
        
def bounce_and_speed_up(vel):
    vel[0] *= -SPEED_UP
    vel[1] *= SPEED_UP
    
def update_paddle():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel
    
    paddle1_pos += paddle1_vel*min(PADDLE_VELOCITY_MIN + (update_tick - paddle1_keydown_tick)*0.5, PADDLE_VELOCITY_MAX)
    paddle2_pos += paddle2_vel*min(PADDLE_VELOCITY_MIN + (update_tick - paddle2_keydown_tick)*0.5, PADDLE_VELOCITY_MAX)
    
    
    if paddle1_pos < HALF_PAD_HEIGHT:
        paddle1_pos = HALF_PAD_HEIGHT
    elif paddle1_pos > HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos = HEIGHT - HALF_PAD_HEIGHT
        
    if paddle2_pos < HALF_PAD_HEIGHT:
        paddle2_pos = HALF_PAD_HEIGHT
    elif paddle2_pos > HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos = HEIGHT - HALF_PAD_HEIGHT
        
     
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    global update_tick
    update_tick += 1
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "Pink")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "Pink")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "Pink")
        
    # update ball
    update_ball()      
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, "Green", "Green")
    # update paddle's vertical position, keep paddle on the screen
    update_paddle()
    # draw paddles
    canvas.draw_polygon([(0, paddle1_pos - HALF_PAD_HEIGHT), 
                         (PAD_WIDTH, paddle1_pos - HALF_PAD_HEIGHT), 
                         (PAD_WIDTH, paddle1_pos + HALF_PAD_HEIGHT), 
                         (0, paddle1_pos + HALF_PAD_HEIGHT)], 
                         1, "Green", "Green")
    canvas.draw_polygon([(WIDTH, paddle2_pos - HALF_PAD_HEIGHT), 
                         (WIDTH - PAD_WIDTH, paddle2_pos - HALF_PAD_HEIGHT), 
                         (WIDTH - PAD_WIDTH, paddle2_pos + HALF_PAD_HEIGHT), 
                         (WIDTH, paddle2_pos + HALF_PAD_HEIGHT)], 
                         1, "Green", "Green")
    # determine whether paddle and ball collide    
    if ball_pos[0] - BALL_RADIUS <= PAD_WIDTH :
        if paddle1_pos - HALF_PAD_HEIGHT <= ball_pos[1] and ball_pos[1] <=  paddle1_pos + HALF_PAD_HEIGHT:
            bounce_and_speed_up(ball_vel)
        else:
            score2 += 1
            spawn_ball(RIGHT)
    elif ball_pos[0] + BALL_RADIUS >= WIDTH - PAD_WIDTH:
        if paddle2_pos - HALF_PAD_HEIGHT <= ball_pos[1] and ball_pos[1] <=  paddle2_pos + HALF_PAD_HEIGHT:
            bounce_and_speed_up(ball_vel)
        else:
            score1 += 1
            spawn_ball(LEFT)
    # draw scores
    canvas.draw_text(str(score1), (WIDTH/4, 50), 40, "Green")
    canvas.draw_text(str(score2), (3*WIDTH/4, 50), 40, "Green")    
def keydown(key):
    global paddle1_vel, paddle2_vel
    global paddle1_keydown_tick, paddle2_keydown_tick
    
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -1
        paddle1_keydown_tick = update_tick
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 1
        paddle1_keydown_tick = update_tick
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -1
        paddle2_keydown_tick = update_tick
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 1
        paddle2_keydown_tick = update_tick
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    global paddle1_keydown_tick, paddle2_keydown_tick
    
    if key == simplegui.KEY_MAP["w"] or key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["up"] or key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
        
def button_handler():
    if score1 > score2:
        new_game(LEFT)
    else:
        new_game(RIGHT)

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Reset", button_handler, 100)


# start frame
new_game()
frame.start()
